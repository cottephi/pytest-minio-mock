---
on:
  pull_request:
    branches:
      - master

concurrency:
  group: check-${{ github.ref }}
  cancel-in-progress: true

name: lint and tests
jobs:

  check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      - uses: 8BitJonny/gh-get-current-pr@master
        id: PR
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Verbose setting SHA when using Pull_Request event trigger to fix #16
          sha: ${{ github.event.pull_request.head.sha }}
          # Only return if PR is still open
          filterOutClosed: true
          # Only return if PR is not in draft state
          filterOutDraft: 1

      - name: Check PR message
        id: check
        run: |
          message=$(echo "${{ steps.PR.outputs.pr_body }}")
          echo "Message is $message"
          if [[ "$message" == "" ]] ; then
            echo "Pull request message not provided!!"
            exit 1
          fi

  install:
    needs: check
    name: install with Python ${{ matrix.py }} on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.12"
          - "3.11"
          - "3.10"
    steps:
      - uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
          ref: refs/heads/${{ github.head_ref }}

      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.py }}

      - name: Check cached Poetry installation
        id: cached-poetry
        uses: actions/cache@master
        with:
          path: /home/runner/.local
          key: poetry-${{ matrix.py }}
          lookup-only: true

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - uses: actions/cache/save@master
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        with:
          path: /home/runner/.local
          key: poetry-${{ matrix.py }}

      - name: Check cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@master
        with:
          path: .venv
          key: venv-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-root --no-interaction
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - uses: actions/cache/save@master
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        with:
          path: .venv
          key: venv-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}

      - name: Check cached tox
        id: cached-tox-dependencies
        uses: actions/cache@master
        with:
          path: .tox
          key: tox-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}
          lookup-only: true

      - name: Install dependencies
        run: source .venv/bin/activate && tox -vv --notest
        if: steps.cached-tox-dependencies.outputs.cache-hit != 'true'
      - uses: actions/cache/save@master
        if: steps.cached-tox-dependencies.outputs.cache-hit != 'true'
        with:
          path: .tox
          key: tox-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}

  ruff:
    needs: install
    name: ruff with Python ${{ matrix.py }} on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.12"  # Ruff only with one python version
    steps:

      - uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
          ref: refs/heads/${{ github.head_ref }}

      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.py }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@master
        with:
          path: /home/runner/.local
          key: poetry-${{ matrix.py }}
          fail-on-cache-miss: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@master
        if: always()
        with:
          path: .venv
          key: venv-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}
          fail-on-cache-miss: true

      - name: Lint with ruff and bandit
        run: |
          poetry run ruff check --force-exclude
          poetry run ruff format --diff
          poetry run bandit -c pyproject.toml -r .

  tests:
    needs: install
    name: Test with Python ${{ matrix.py }} on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.12"
          - "3.11"
          - "3.10"
    steps:

      - uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
          ref: refs/heads/${{ github.head_ref }}

      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.py }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@master
        with:
          path: /home/runner/.local
          key: poetry-${{ matrix.py }}
          fail-on-cache-miss: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@master
        with:
          path: .venv
          key: venv-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}
          fail-on-cache-miss: true

      - name: Load cached tox
        id: cached-tox-dependencies
        uses: actions/cache@master
        with:
          path: .tox
          key: tox-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}
          fail-on-cache-miss: true

      - name: Test with tox
        run: |
          source .venv/bin/activate &&  tox --skip-pkg-install